{"ast":null,"code":"var _jsxFileName = \"/Users/alanvang/Documents/Tic-Tac-Toe/src/Components/Board/Board.js\";\nimport React, { useState } from 'react';\nimport Square from '../Square/Square';\nimport r2h from '../../img/r2h.png';\nimport fellowship from '../../img/fellowships.png';\nimport RestButton from '../ResetButton';\n\nconst Board = () => {\n  // this renders a new game \n  const initialBoard = Array(9).fill(null); // creating HOOK\n\n  const [squares, setSquares] = useState(initialBoard); // this determined who goes first\n\n  const [playerXIsNext, setPlayerXIsNext] = useState(true);\n\n  const renderSquare = i => {\n    return /*#__PURE__*/React.createElement(Square, {\n      value: squares[i],\n      onClick: () => handleClick(i),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 15,\n        columnNumber: 16\n      }\n    });\n  };\n\n  const handleClick = i => {\n    const newSquares = [...squares];\n    const winnerDeclared = Boolean(calculateWinner(squares)); // this stops from changing the value once placed (X or O)\n\n    const squareAlreadyFilled = Boolean(newSquares[i]);\n    if (winnerDeclared || squareAlreadyFilled) return;\n    newSquares[i] = playerXIsNext ? \"X\" : \"O\"; // changing State?\n\n    setSquares(newSquares);\n    setPlayerXIsNext(!playerXIsNext);\n  }; // this determines if game is a DRAW\n\n\n  const isBoardFull = squares => {\n    for (let i = 0; i < squares.length; i++) {\n      if (squares[i] == null) {\n        return false;\n      }\n    }\n\n    return true;\n  };\n\n  const calculateWinner = squares => {\n    /* Squares indexes as they appear in UI:\n    0 1 2\n    3 4 5\n    6 7 8\n    */\n    const lines = [[0, 1, 2], [3, 4, 5], [6, 7, 8], [0, 3, 6], [1, 4, 7], [2, 5, 8], [0, 4, 8], [2, 4, 6]]; // shows all of the winning combinations (\"lines\")\n    // iterate over lines\n\n    for (let line of lines) {\n      const [a, b, c] = line;\n\n      if (squares[a] && squares[a] === squares[b] && squares[a] === squares[c]) {\n        return squares[a];\n      }\n    }\n\n    return null;\n  };\n\n  const winner = calculateWinner(squares);\n\n  const getStatus = () => {\n    if (winner) {\n      return \"congrats \" + winner;\n    } else if (isBoardFull(squares)) {\n      return \"its a draw\";\n    } else {\n      return \"next player is player \" + (playerXIsNext ? \"X\" : \"O\");\n    }\n  };\n\n  const restGame = () => {\n    // setting state to inital value\n    setSquares(initialBoard);\n    setPlayerXIsNext(true);\n  };\n\n  return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(\"main\", {\n    className: `main--container ${winner && getStatus() === \"congrats \" + winner || !winner && getStatus() === \"its a draw\" ? getStatus() === \"its a draw\" ? \"draw\" : \"winner\" : playerXIsNext ? \"X\" : \"O\"}`,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 80,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"status\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 87,\n      columnNumber: 17\n    }\n  }, getStatus()), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"board--container\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 90,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"board\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 91,\n      columnNumber: 21\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"board--row\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 92,\n      columnNumber: 25\n    }\n  }, renderSquare(0), renderSquare(1), renderSquare(2)), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"board--row\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 97,\n      columnNumber: 25\n    }\n  }, renderSquare(3), renderSquare(4), renderSquare(5)), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"board--row\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 102,\n      columnNumber: 25\n    }\n  }, renderSquare(6), renderSquare(7), renderSquare(8))), /*#__PURE__*/React.createElement(RestButton, {\n    onClick: restGame,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 108,\n      columnNumber: 21\n    }\n  }))));\n};\n\nexport default Board;","map":{"version":3,"sources":["/Users/alanvang/Documents/Tic-Tac-Toe/src/Components/Board/Board.js"],"names":["React","useState","Square","r2h","fellowship","RestButton","Board","initialBoard","Array","fill","squares","setSquares","playerXIsNext","setPlayerXIsNext","renderSquare","i","handleClick","newSquares","winnerDeclared","Boolean","calculateWinner","squareAlreadyFilled","isBoardFull","length","lines","line","a","b","c","winner","getStatus","restGame"],"mappings":"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","sourcesContent":["import React, { useState } from 'react';\nimport Square from '../Square/Square';\nimport r2h from '../../img/r2h.png'\nimport fellowship from '../../img/fellowships.png'\nimport RestButton from '../ResetButton'\n\nconst Board = () => {\n    // this renders a new game \n    const initialBoard = Array(9).fill(null)\n    // creating HOOK\n    const [squares, setSquares] = useState(initialBoard)\n    // this determined who goes first\n    const [playerXIsNext, setPlayerXIsNext] = useState(true)\n    const renderSquare = (i) => {\n        return <Square value={squares[i]} onClick={() => handleClick(i)} />\n    }\n    const handleClick = (i) => {\n        const newSquares = [...squares]\n        const winnerDeclared = Boolean(calculateWinner(squares))\n        // this stops from changing the value once placed (X or O)\n        const squareAlreadyFilled = Boolean(newSquares[i])\n        if (winnerDeclared || squareAlreadyFilled) return\n        newSquares[i] = playerXIsNext ? \"X\" : \"O\"\n        // changing State?\n        setSquares(newSquares)\n        setPlayerXIsNext(!playerXIsNext)\n    }\n    // this determines if game is a DRAW\n    const isBoardFull = (squares) => {\n        for (let i = 0; i < squares.length; i++) {\n            if (squares[i] == null) {\n                return false\n            }\n        }\n        return true\n    }\n    const calculateWinner = (squares) => {\n        /* Squares indexes as they appear in UI:\n       0 1 2\n       3 4 5\n       6 7 8\n       */\n        const lines = [\n            [0, 1, 2],\n            [3, 4, 5],\n            [6, 7, 8],\n            [0, 3, 6],\n            [1, 4, 7],\n            [2, 5, 8],\n            [0, 4, 8],\n            [2, 4, 6],\n        ]; // shows all of the winning combinations (\"lines\")\n        // iterate over lines\n        for (let line of lines) {\n            const [a, b, c] = line\n            if (squares[a] && squares[a] === squares[b] &&\n                squares[a] === squares[c]) {\n                return squares[a]\n            }\n        }\n        return null\n    }\n    const winner = calculateWinner(squares)\n    const getStatus = () => {\n        if (winner) {\n            return \"congrats \" + winner\n        } else if (isBoardFull(squares)) {\n            return \"its a draw\"\n        } else {\n            return \"next player is player \" + (playerXIsNext ? \"X\" : \"O\")\n        }\n    }\n    const restGame = () => {\n        // setting state to inital value\n        setSquares(initialBoard)\n        setPlayerXIsNext(true)\n    }\n    return (\n        <>\n            <main className={`main--container ${(winner && getStatus() ===\n                \"congrats \" + winner || !winner && getStatus() ===\n                \"its a draw\" ? (getStatus() === \"its a draw\" ? \"draw\" : \"winner\") : (playerXIsNext ? \"X\" : \"O\"))}`}>\n                {/* <div className=\"logo\">\n                    <img src={r2h} alt=\"r2h logo\" />\n                    <img src={fellowship} alt=\"fellowship\" />\n                </div> */}\n                <div className=\"status\">\n                    {getStatus()}\n                </div>\n                <div className=\"board--container\">\n                    <div className=\"board\">\n                        <div className=\"board--row\">\n                            {renderSquare(0)}\n                            {renderSquare(1)}\n                            {renderSquare(2)}\n                        </div>\n                        <div className=\"board--row\">\n                            {renderSquare(3)}\n                            {renderSquare(4)}\n                            {renderSquare(5)}\n                        </div>\n                        <div className=\"board--row\">\n                            {renderSquare(6)}\n                            {renderSquare(7)}\n                            {renderSquare(8)}\n                        </div>\n                    </div>\n                    <RestButton onClick={restGame} />\n                </div>\n            </main>\n        </>\n    )\n}\nexport default Board;"]},"metadata":{},"sourceType":"module"}